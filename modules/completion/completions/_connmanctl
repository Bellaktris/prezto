#compdef connmanctl
#
# ------------------------------------------------------------------------------
# The MIT License
#
# Copyright 2014 Damir JeliÄ‡
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for connmanctl
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Yury Gitman <me.gitman@gmail.com>
#
# ------------------------------------------------------------------------------

_technologies() {
    local -a _technology_list
    IFS=$'\n' _technology_list=( $(connmanctl technologies \
        | grep "technology/" | egrep -o "[[:alpha:]_-]*$") )
    IFS=' ' _describe 'technologies' _technology_list
}

_services() {
    local -a _service_list1
    local -a _service_list2

    IFS=$'\n' _service_list2=( \
        $(connmanctl services | egrep -o "[[:alnum:]_-]*$") )

    IFS=$'\n' _service_list1=( $(connmanctl services \
        | egrep -o "[[:alnum:]_-]*[[:space:]]*[[:alnum:]_-]*$" | cut -d " " -f 1) )

    IFS=' ' _describe -V 'services' _service_list1 _service_list2
}

_connmanctl() {
    typeset -A opt_args
    local curcontext="$curcontext" state line

    _arguments -C \
        '1:connmanctl commands:->cmds' \
        '*:: :->cmd_args' \

    case $state in
        cmds)
            local commands; commands=(
                'help: Show help' 'state: Show the system properties'
                'technologies: Shows a list of all technology types existing on the system'
                'enable: Enable the given technology type or mode'
                'disable: Disable the given technology type or mode'
                'tether: Enable or disable tethering on technology'
                'services: Show a list of all properties for that service'
                'scan: Scan for new services on the given technology'
                'connect: Connect to the given service'
                'disconnect: Disconnect from the given service'
                'move-before: Prefer connecting to service over target-service'
                'move-after: Prefer connecting to target-service over service'
                'config: Configure a writable property of the given service'
                'monitor: Listen for and displays DBus signals sent by Connman'
                'vpnconnections: Show the current properties of connection'
            )
            _describe -t commands 'connmanctl commands' commands
        ;;

        cmd_args)
            case $words[1] in
                 tether) _arguments ':technologies:_technologies' ':mode:(on off)';;
                   scan) _arguments ':technologies:_technologies';;

               services) _arguments "::services:_services";;
                connect) _arguments ":services:_services";;
             disconnect) _arguments ":services:_services";;
            move-before) _arguments ":services:_services" ":services:_services";;
             move-after) _arguments ":services:_services" ":services:_services";;

                monitor) _arguments ":targers:(services tech manager vpnmanager vpnconnection)";;

                 config) _arguments ":services:_services" \
                             ":options:(autoconnect ipv4 ipv6 nameservers timeservers domains proxy)" \
                             "*:: :->opt_args"

                        [[ $words[3] == "nameservers" ]] \
                            && _describe 'nameservers' "(8.8.8.8 8.8.4.4)"

                        [[ $words[3] -regex-match "^url|manual|timeservers|domains$" ]] \
                            && _describe 'address' "( )"

                        [[ $state == "opt_args" && $#words == 3 ]] \
                            && { case $words[2] in
                                    autoconnect) _describe 'mode' "(on off)";;
                                           ipv4) _describe 'mode' '(dhcp off manual)';;
                                           ipv6) _describe 'mode' '(auto off manual)';;
                                          proxy) _describe 'mode' '(direct url manual)';;
                                 esac } ;;

                 enable) _arguments ':technologies:_technologies';;
                disable) _arguments ':technologies:_technologies';;
            esac
        ;;
    esac
}

_connmanctl "$@"
